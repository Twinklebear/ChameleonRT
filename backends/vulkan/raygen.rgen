#version 460

#include "util.glsl"
#include "lcg_rng.glsl"
#include "lights.glsl"
#include "disney_bsdf.glsl"
#include "util/texture_channel_mask.h"

struct MaterialParams {
    vec3 base_color;
    float metallic;

    float specular;
    float roughness;
    float specular_tint;
    float anisotropy;

    float sheen;
    float sheen_tint;
    float clearcoat;
    float clearcoat_gloss;

    float ior;
    float specular_transmission;
    vec2 pad;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, set = 0, rgba8) uniform writeonly image2D framebuffer;
layout(binding = 2, set = 0, rgba32f) uniform image2D accum_buffer;

layout(binding = 3, set = 0, std140) uniform ViewParams {
    vec4 cam_pos;
    vec4 cam_du;
    vec4 cam_dv;
    vec4 cam_dir_top_left;
    int frame_id;
};

layout(binding = 4, set = 0, scalar) buffer MaterialParamsBuffer {
    MaterialParams material_params[];
};

layout(binding = 5, set = 0, std430) buffer LightParamsBuffer {
    QuadLight lights[];
};

#ifdef REPORT_RAY_STATS
layout(binding = 6, set = 0, r16ui) uniform writeonly uimage2D ray_stats;
#endif

layout(binding = 0, set = 1) uniform sampler2D textures[];

layout(location = PRIMARY_RAY) rayPayloadEXT RayPayload payload;
layout(location = OCCLUSION_RAY) rayPayloadEXT bool occlusion_hit;

layout(shaderRecordEXT) buffer SBT {
    uint32_t num_lights;
};

float textured_scalar_param(const float x, in const vec2 uv) {
    const uint32_t mask = floatBitsToUint(x);
    if (IS_TEXTURED_PARAM(mask) != 0) {
        const uint32_t tex_id = GET_TEXTURE_ID(mask);
        const uint32_t channel = GET_TEXTURE_CHANNEL(mask);
        return texture(textures[nonuniformEXT(tex_id)], uv)[channel];
    }
    return x;
}

void unpack_material(inout DisneyMaterial mat, uint id, vec2 uv) {
	MaterialParams p = material_params[nonuniformEXT(id)];

    const uint32_t mask = floatBitsToUint(p.base_color.x);
    if (IS_TEXTURED_PARAM(mask) != 0) {
        const uint32_t tex_id = GET_TEXTURE_ID(mask);
        const uint32_t channel = GET_TEXTURE_CHANNEL(mask);
        mat.base_color = texture(textures[nonuniformEXT(tex_id)], uv).rgb;
    } else {
		mat.base_color = p.base_color;
	}

    mat.metallic = textured_scalar_param(p.metallic, uv);
    mat.specular = textured_scalar_param(p.specular, uv);
    mat.roughness = textured_scalar_param(p.roughness, uv);
    mat.specular_tint = textured_scalar_param(p.specular_tint, uv);
    mat.anisotropy = textured_scalar_param(p.anisotropy, uv);
    mat.sheen = textured_scalar_param(p.sheen, uv);
    mat.sheen_tint = textured_scalar_param(p.sheen_tint, uv);
    mat.clearcoat = textured_scalar_param(p.clearcoat, uv);
    mat.clearcoat_gloss = textured_scalar_param(p.clearcoat_gloss, uv);
    mat.ior = textured_scalar_param(p.ior, uv);
    mat.specular_transmission = textured_scalar_param(p.specular_transmission, uv);
}

vec3 sample_direct_light(in const DisneyMaterial mat, in const vec3 hit_p, in const vec3 n,
	in const vec3 v_x, in const vec3 v_y, in const vec3 w_o, inout uint ray_count, inout LCGRand rng)
{
	vec3 illum = vec3(0.f);

	uint32_t light_id = uint32_t(lcg_randomf(rng) * num_lights);
	light_id = min(light_id, num_lights - 1);
	QuadLight light = lights[nonuniformEXT(light_id)];

    const uint32_t occlusion_flags = gl_RayFlagsOpaqueEXT
        | gl_RayFlagsTerminateOnFirstHitEXT
        | gl_RayFlagsSkipClosestHitShaderEXT;

	// Sample the light to compute an incident light ray to this point
	{
		vec3 light_pos = sample_quad_light_position(light,
                vec2(lcg_randomf(rng), lcg_randomf(rng)));
		vec3 light_dir = light_pos - hit_p;
		float light_dist = length(light_dir);
		light_dir = normalize(light_dir);

		float light_pdf = quad_light_pdf(light, light_pos, hit_p, light_dir);
		float bsdf_pdf = disney_pdf(mat, n, w_o, light_dir, v_x, v_y);

        occlusion_hit = true;
        traceRayEXT(scene, occlusion_flags, 0xff,
                PRIMARY_RAY, 1, OCCLUSION_RAY, hit_p, EPSILON, light_dir, light_dist, OCCLUSION_RAY);
#ifdef REPORT_RAY_STATS
		++ray_count;
#endif
		if (light_pdf >= EPSILON && bsdf_pdf >= EPSILON && !occlusion_hit) {
			vec3 bsdf = disney_brdf(mat, n, w_o, light_dir, v_x, v_y);
			float w = power_heuristic(1.f, light_pdf, 1.f, bsdf_pdf);
			illum = bsdf * light.emission.rgb * abs(dot(light_dir, n)) * w / light_pdf;
		}
	}

	// Sample the BRDF to compute a light sample as well
	{
		vec3 w_i;
		float bsdf_pdf;
		vec3 bsdf = sample_disney_brdf(mat, n, w_o, v_x, v_y, rng, w_i, bsdf_pdf);
		
		float light_dist;
		vec3 light_pos;
		if (any(greaterThan(bsdf, vec3(0.f))) && bsdf_pdf >= EPSILON
			&& quad_intersect(light, hit_p, w_i, light_dist, light_pos))
		{
			float light_pdf = quad_light_pdf(light, light_pos, hit_p, w_i);
			if (light_pdf >= EPSILON) {
				float w = power_heuristic(1.f, bsdf_pdf, 1.f, light_pdf);
                occlusion_hit = true;
                traceRayEXT(scene, occlusion_flags, 0xff,
                        PRIMARY_RAY, 1, OCCLUSION_RAY, hit_p, EPSILON, w_i, light_dist, OCCLUSION_RAY);
#ifdef REPORT_RAY_STATS
				++ray_count;
#endif
				if (!occlusion_hit) {
					illum += bsdf * light.emission.rgb * abs(dot(w_i, n)) * w / bsdf_pdf;
				}
			}
		}
	}
	return illum;
}

void main() {
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    const vec2 dims = vec2(gl_LaunchSizeEXT.xy);
    LCGRand rng = get_rng(frame_id);
    vec2 d = (pixel + vec2(lcg_randomf(rng), lcg_randomf(rng))) / dims;

    vec3 ray_origin = cam_pos.xyz;
    vec3 ray_dir = normalize(d.x * cam_du.xyz + d.y * cam_dv.xyz + cam_dir_top_left.xyz);
    float t_min = 0;
    float t_max = 1e20f;

    DisneyMaterial mat;

	uint ray_count = 0;
	int bounce = 0;
	vec3 illum = vec3(0.f);
	vec3 path_throughput = vec3(1.f);
    do {
        traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, PRIMARY_RAY, 1, PRIMARY_RAY,
                ray_origin, t_min, ray_dir, t_max, PRIMARY_RAY);
#ifdef REPORT_RAY_STATS
		++ray_count;
#endif
        // If we hit nothing, include the scene background color from the miss shader
        if (payload.dist < 0.f) {
            illum += path_throughput * payload.normal.rgb;
            break;
        }

		const vec3 w_o = -ray_dir;
		const vec3 hit_p = ray_origin + payload.dist * ray_dir;
		unpack_material(mat, payload.material_id, payload.uv);

		vec3 v_x, v_y;
		vec3 v_z = payload.normal;
		// For opaque objects (or in the future, thin ones) make the normal face forward
		if (mat.specular_transmission == 0.f && dot(w_o, v_z) < 0.0) {
			v_z = -v_z;
		}
		ortho_basis(v_x, v_y, v_z);

		illum += path_throughput * sample_direct_light(mat, hit_p, v_z, v_x, v_y, w_o, ray_count, rng);

		vec3 w_i;
		float pdf;
		vec3 bsdf = sample_disney_brdf(mat, v_z, w_o, v_x, v_y, rng, w_i, pdf);
		if (pdf == 0.f || all(equal(bsdf, vec3(0.f)))) {
			break;
		}
		path_throughput *= bsdf * abs(dot(w_i, v_z)) / pdf;

		ray_origin = hit_p;
		ray_dir = w_i;
		t_min = EPSILON;
		t_max = 1e20f;
		++bounce;

        // Russian roulette termination
        if (bounce > 3) {
            const float q = max(0.05f, 1.f - max(path_throughput.x, max(path_throughput.y, path_throughput.z)));
            if (lcg_randomf(rng) < q) {
                break;
            }
            path_throughput = path_throughput / (1.f - q);
        }
	} while (bounce < MAX_PATH_DEPTH);
    // Test for AMD shader indexing issue?
    illum = illum * float(num_lights);

    vec4 accum_color = imageLoad(accum_buffer, pixel);
	accum_color = (vec4(illum, 1.0) + frame_id * accum_color) / (frame_id + 1);
    imageStore(accum_buffer, pixel, accum_color);

    accum_color.xyz = vec3(linear_to_srgb(accum_color.x), linear_to_srgb(accum_color.y),
            linear_to_srgb(accum_color.z));
    imageStore(framebuffer, pixel, vec4(accum_color.xyz, 1.f));

#ifdef REPORT_RAY_STATS
    imageStore(ray_stats, pixel, uvec4(ray_count));
#endif
}

