#version 460

#include "util.glsl"
#include "util/texture_channel_mask.h"

layout(binding = 0, set = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, set = 0, rgba8) uniform writeonly image2D framebuffer;
layout(binding = 2, set = 0, rgba32f) uniform image2D accum_buffer;

layout(binding = 3, set = 0, std140) uniform ViewParams {
    vec4 cam_pos;
    vec4 cam_du;
    vec4 cam_dv;
    vec4 cam_dir_top_left;
    int frame_id;
    int samples_per_pixel;
};

#ifdef REPORT_RAY_STATS
layout(binding = 6, set = 0, r16ui) uniform writeonly uimage2D ray_stats;
#endif

layout(location = PRIMARY_RAY) rayPayloadEXT BarycentricsPayload payload;

layout(shaderRecordEXT) buffer SBT {
    uint32_t num_lights;
};

void main() {
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    const vec2 dims = vec2(gl_LaunchSizeEXT.xy);

    uint ray_count = 0;
    vec3 illum = vec3(0.f);
    for (int s = 0; s < samples_per_pixel; ++s) {
        vec2 d = (pixel + vec2(0.5f)) / dims;

        vec3 ray_origin = cam_pos.xyz;
        vec3 ray_dir = normalize(d.x * cam_du.xyz + d.y * cam_dv.xyz + cam_dir_top_left.xyz);
        float t_min = 0;
        float t_max = 1e20f;

        traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, PRIMARY_RAY, 1, PRIMARY_RAY,
                ray_origin, t_min, ray_dir, t_max, PRIMARY_RAY);
#ifdef REPORT_RAY_STATS
        ++ray_count;
#endif
        // If we hit nothing, include the scene background color from the miss shader
        if (payload.dist > 0.f) {
            illum += vec3(payload.bary.x, payload.bary.y, 1.f - payload.bary.x - payload.bary.y);
        }
    }
    illum = illum / samples_per_pixel;

    vec4 accum_color = vec4(illum, 1.0);
    imageStore(accum_buffer, pixel, accum_color);

    accum_color.xyz = vec3(linear_to_srgb(accum_color.x),
            linear_to_srgb(accum_color.y),
            linear_to_srgb(accum_color.z));
    imageStore(framebuffer, pixel, vec4(accum_color.xyz, 1.f));

#ifdef REPORT_RAY_STATS
    imageStore(ray_stats, pixel, uvec4(ray_count));
#endif
}

